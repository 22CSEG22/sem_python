# -*- coding: utf-8 -*-
"""PYTHON_SEMINAR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JYF9cCC2ylv8g5ubhW5e56D-kEKD0fQW
"""

#Importing the packags and dataset
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
data=pd.read_csv("/content/drive/MyDrive/python datasets/diabetes_python_ass.csv")
data.head(10)

#Getting the basic information about the dataset
data.shape

data.info()

data.describe()

data.dtypes

#checking the missing values
data.isnull().sum()

#EDA
#classifying the output category
data['Outcome'].value_counts()

#Visualizing the Output categories
sns.countplot(data['Outcome'])

#univariate
plt.hist(data['Outcome'])
plt.xlabel('Outcome')
plt.ylabel('COUNT')
plt.title('UNIVARIATE FOR "Outcome"')

#BIVARIATE USING BAR PLOT
bins=[0,20,40,60,80]
labels=[1,2,3,4]
data['G_level']=pd.cut(data['Glucose'],bins=bins,labels=labels)
bar=sns.barplot(data=data,x='G_level',y='Age')
plt.title(' Bi-Variate Analysis for AGE and G_level using barplot')
plt.show(bar)

sns.boxplot(data=data,x='G_level',y='Age')
plt.title(' Bi-Variate Analysis for G_level and Age using boxplot')

#Multivariate using scatter
scatter=sns.scatterplot(data=data,x='G_level',y='Age',hue='BMI')
plt.title('Multi-variate using Scatterplot')
plt.show(scatter)

#multivariate using heatmap
corr=data.corr()
sns.heatmap(corr,annot=True)
plt.title('Multi-variate using Heatmap')

#droping the coulmns having null values and visualizing it 
for i in data.describe().columns:
    sns.distplot(data[i].dropna())
    plt.show()

#spliting the dependent and independent variables
x=data.iloc[:,:8] #independent
y=data.iloc[:,-1] #dependent

x

y

#Train Test Moule
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

#Implementing Algorithm:
from sklearn.linear_model import LogisticRegression
logreg=LogisticRegression()
logreg

#Training and predictions:
logreg.fit(x_train,y_train)
y_pred=logreg.predict(x_test)
y_pred

df=pd.DataFrame({"actual":y_test,"predicted":y_pred})
df
#writing the file into drive
df.to_csv("/content/drive/MyDrive/python datasets/seminar.csv")

#Evaluating Algorithm:
from sklearn import metrics
con=metrics.confusion_matrix(y_test,y_pred)
print("accuracy:",metrics.accuracy_score(y_test,y_pred))
metrics.precision_score(y_test,y_pred)
metrics.recall_score(y_test,y_pred)